#include "securify/input.dl"
#include "securify/basics.dl"
#include "securify/blocks.dl"

#include "securify/util-debug.dl"
#include "securify/util-graph.dl"
#include "securify/util-lists.dl"
#include "securify/util-macros.dl"

#include "securify/constants_config.dl"
#include "securify/config.dl"

#include "securify/contexts.dl"
#include "securify/constants.dl"
#include "securify/storage.dl"

#include "securify/callstack-context.dl"

#include "securify/call-graph.dl"

#include "securify/dataflow.dl"
#include "securify/infoflow.dl"

// Setup Analysis Modules
.init storageAnalysis = MultiTransactionStorageAnalysis
.init ctxProvider = FullContext

.decl gasLimitedCall(call: Transfer)
gasLimitedCall(call) :-
	callInfo(call, _, callType),
	(
		callType = "send";
		callType = "transfer"
	).

// Setup Context
ctxProvider.requestContextForInit(f) :- isConstructor(f), !isInternal(f).
ctxProvider.requestContextForInit(f) :- externallyCallable(f).

// Build contexts for (external) message calls
// Assume recursive calls during external calls
ctxProvider.requestFallbackContextForCall(fn, t, cc) :-
	function(f, _),
	call(t, _, _, _), !gasLimitedCall(t),
	isInFunction(t, f), contractFunction(contract, f),
	externallyCallable(fn), contractFunction(contract, fn),
	ctxProvider.contextFor(f, cc).

// Associate program elements with contexts
ctxProvider.executionState([element, ctx]) :-
	function(f, _),
	isInFunction(element, f),
	ctxProvider.contextFor(f, ctx).

.init dataflow = DependenceAnalysis
.init infoflow = InfoFlowAnalysis
.init programFlow = ControlFlowAnalysis